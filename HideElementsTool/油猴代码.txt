// ==UserScript==
// @name         隐藏指定元素
// @namespace    http://tampermonkey.net/
// @version      1.3
// @description  手动输入多个类名并隐藏指定父级数的元素，自动执行在新页面或页面刷新时。支持配置文件保存和读取，操作通过网页按钮进行。
// @author       诗薰 && ChatGpt4o
// @match        *://*/*
// @grant        none
// ==/UserScript==

(function() {
    'use strict';

    // 设置目录名 大多数浏览器不支持，请手动移动到自己喜欢的位置
    const customDirectory = 'JsonConfig';

    // 手动输入类名和父级数
    let classNamesMap = new Map(); // 保存类名和对应的父级数
    let hidden = true;

    // 记录最近的隐藏操作
    let previousState = [];
    let actionList = []; // 用于记录所有操作
    let currentIndex = -1; // 当前操作的索引

    // 创建和样式
    const buttonContainer = document.createElement('div');
    buttonContainer.style.position = 'fixed';
    buttonContainer.style.bottom = '10px';
    buttonContainer.style.right = '10px';
    buttonContainer.style.zIndex = 1000;

    const toggleButton = document.createElement('button');
    toggleButton.textContent = '操作面板';
    toggleButton.style.marginBottom = '5px';
    buttonContainer.appendChild(toggleButton);

    const panel = document.createElement('div');
    panel.style.display = 'none';
    panel.style.border = '1px solid #ccc';
    panel.style.padding = '10px';
    panel.style.backgroundColor = '#f9f9f9';
    panel.style.boxShadow = '0 2px 5px rgba(0,0,0,0.2)';
    buttonContainer.appendChild(panel);

    const actions = [
        { text: '隐藏元素', action: () => { promptClassNameAndParent(); } },
        { text: '撤回操作', action: () => { undoLastAction(); } },
        { text: '重做操作', action: () => { redoLastAction(); } },
        { text: '保存配置', action: () => { saveConfig(); } },
        { text: '加载配置', action: () => { openConfigFile(); } },
        { text: '查看配置', action: () => { logCurrentConfig(); } },
        { text: '历史记录', action: () => { viewActionHistory(); } } // 添加历史记录按钮
    ];

    actions.forEach(({ text, action }) => {
        const btn = document.createElement('button');
        btn.textContent = text;
        btn.style.display = 'block';
        btn.style.marginBottom = '5px';
        btn.addEventListener('click', action);
        panel.appendChild(btn);
    });

    document.body.appendChild(buttonContainer);

    toggleButton.addEventListener('click', () => {
        panel.style.display = panel.style.display === 'none' ? 'block' : 'none';
    });

    document.addEventListener('keydown', function(e) {
        if (e.key.toUpperCase() === 'TAB') {
            buttonContainer.style.display = buttonContainer.style.display !== 'none' ? 'none' : 'block';
        }
    });

    // 提示输入类名和父级数
    function promptClassNameAndParent() {
        const input = prompt("请输入要隐藏的元素的类名，用空格或回车分隔:");
        const newClassNames = input.split(/\s+/).filter(name => name.trim() !== '');
        const newParentLevels = parseInt(prompt("请输入要隐藏的父级数:"), 10);

        if (newClassNames.length > 0 && newParentLevels >= 0) {
            newClassNames.forEach(className => {
                classNamesMap.set(className, newParentLevels); // 更新类名和父级数的映射
            });

            // 记录当前操作的类名和父级数
            actionList = actionList.slice(0, currentIndex + 1); // 截断后面的操作
            actionList.push({ type: 'hide', classNames: newClassNames, parentLevels: newParentLevels });
            currentIndex++;

            console.log('输入的类名:', newClassNames);
            console.log('输入的父级数:', newParentLevels);
            toggleElements(newClassNames, newParentLevels);
        }
    }

    // 隐藏包含指定类名的元素及其父级元素
    function toggleElements(classNamesToToggle, parentLevelsToToggle) {
        if (classNamesToToggle.length === 0 || parentLevelsToToggle < 0) return;

        const currentState = [];

        classNamesToToggle.forEach(className => {
            const elements = document.querySelectorAll(`.${className}`);
            elements.forEach(function(element) {
                let parent = element;
                for (let i = 0; i < parentLevelsToToggle; i++) {
                    if (parent) {
                        parent = parent.parentElement;
                    }
                }
                if (parent) {
                    currentState.push({
                        element: parent,
                        display: parent.style.display
                    });
                    parent.style.display = hidden ? 'none' : '';
                }
            });
        });

        previousState.push([...currentState]); // 保存当前状态
        console.log('当前状态已保存:', currentState);
        logCurrentConfig(); // 在控制台输出当前配置
    }

    // 撤回最近的隐藏操作
    function undoLastAction() {
        if (currentIndex >= 0) {
            const lastAction = actionList[currentIndex];

            if (lastAction.type === 'hide') {
                previousState[currentIndex].forEach(({ element, display }) => {
                    element.style.display = display;
                });

                // 移除撤回的类名
                lastAction.classNames.forEach(className => {
                    classNamesMap.delete(className);
                });
                previousState.pop();
            }

            currentIndex--;
            console.log('撤回操作:', lastAction);
            logCurrentConfig(); // 在控制台输出当前配置
        }
    }

    // 重做操作
    function redoLastAction() {
        if (currentIndex < actionList.length - 1) {
            currentIndex++;
            const nextAction = actionList[currentIndex];

            if (nextAction.type === 'hide') {
                toggleElements(nextAction.classNames, nextAction.parentLevels);
                nextAction.classNames.forEach(className => {
                    classNamesMap.set(className, nextAction.parentLevels); // 重新添加类名和父级数的映射
                });
            }

            console.log('重做操作:', nextAction);
            logCurrentConfig(); // 在控制台输出当前配置
        }
    }

    // 查看历史记录
    function viewActionHistory() {
        console.log('行为列表:', actionList);
    }

    // 打开配置文件
    function openConfigFile() {
        const input = document.createElement('input');
        input.type = 'file';
        input.accept = '.json';
        input.style.display = 'none';
        input.addEventListener('change', handleFileSelect);
        document.body.appendChild(input);
        input.click();
    }

    // 处理文件选择
    function handleFileSelect(event) {
        const file = event.target.files[0];
        if (file) {
            const reader = new FileReader();
            reader.onload = function(e) {
                const data = JSON.parse(e.target.result);
                if (data.classNamesMap && Array.isArray(data.classNamesMap)) {
                    classNamesMap = new Map(data.classNamesMap);
                    classNamesMap.forEach((parentLevels, className) => {
                        toggleElements([className], parentLevels);
                    });
                }
                console.log('配置文件加载完成:', { classNamesMap });
            };
            reader.readAsText(file);
        }
    }

    // 保存配置到文件
    function saveConfig() {
        const data = {
            classNamesMap: [...classNamesMap]
        };
        const url = getFileName();
        const blob = new Blob([JSON.stringify(data, null, 2)], { type: 'application/json' });
        const a = document.createElement('a');
        a.href = URL.createObjectURL(blob);
        a.download = url;
        a.click();
        URL.revokeObjectURL(a.href);
    }

    // 在控制台输出当前配置
    function logCurrentConfig() {
        console.log(`当前配置:\n类名和父级数:`, [...classNamesMap]);
    }

    // 根据当前网页生成文件名
    function getFileName() {
        const hostname = window.location.hostname.replace(/\./g, '_'); // 将点替换为下划线以兼容文件名
        return `${hostname}.json`;
    }
})();
